<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">
	<context:annotation-config/>
	<bean id="locale" class="java.util.Locale">
		<constructor-arg value="it"/>
		<constructor-arg value="IT"/>
	</bean>
	<bean id="mailSession" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="mail/Session"/>
		<property name="resourceRef" value="true"/>
	</bean>
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="session" ref="mailSession"/>
	</bean>
	<bean id="mailFreemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
		<property name="templateLoaderPath" value="/WEB-INF/mail"/>
	</bean>
	<bean id="mailTemplate" abstract="true" class="org.webcomponents.mail.FreeMarkerMailTemplate">
		<property name="configuration" ref="mailFreemarkerConfiguration" />
		<property name="locale" ref="locale" />
	</bean>
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/webcomponents"/>
		<property name="resourceRef" value="true"/>
	</bean>
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="/WEB-INF/sql-map-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<bean id="weeklyTokenService" class="org.webcomponents.security.token.sqlmap.SqlMapTokenServiceImpl">
		<property name="sqlMapClient" ref="sqlMapClient"/>
		<property name="namespace" value="token"/>
	</bean>
	<bean id="dailyTokenService" class="org.webcomponents.security.token.sqlmap.SqlMapTokenServiceImpl">
		<property name="sqlMapClient" ref="sqlMapClient"/>
		<property name="defaultSpan" value="86400000"/>
		<property name="namespace" value="token"/>
	</bean>
	<bean class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService" id="imageCaptchaService">
		<property name="captchaEngine" ref="captchaEngine"/>
	</bean>
<!-- 
	There are several Engines pre-configured, but as we want to control configuration, 
	we have to use the GenericCaptchaEngine, 
	which is built with a list of captcha factories (factories are the real producer of captchas)
-->
	<bean id="captchaEngine" class="com.octo.captcha.engine.GenericCaptchaEngine">
		<constructor-arg index="0">
			<list>
				<ref bean="captchaFactory"/>
			</list>
		</constructor-arg>
	</bean>
<!-- 
	Then, a CaptchaFactory needs:

    * A word generator, to create the text to read.
    * A wordToImage, to generate the captcha from the text.
-->
	<bean id="captchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory" >
		<constructor-arg><ref bean="wordgen"/></constructor-arg>
		<constructor-arg><ref bean="wordtoimage"/></constructor-arg>
	</bean>
<!-- 
	A WordGenerator creates a text to be read, it can be random,
	be a common implementation take words from a list,
	and can make composition to create a text easier to read for a human being.
	In the example the WordGenerator needs a Dictionnary to get real words from.
-->
	<bean id="wordgen" class= "com.octo.captcha.component.word.wordgenerator.DictionaryWordGenerator">
		<constructor-arg>
			<bean class="com.octo.captcha.component.word.FileDictionary">
				<constructor-arg index="0"><value>toddlist</value></constructor-arg>
			</bean>
		</constructor-arg>
	</bean>
<!-- 
	fter to other important part to create a factory, is the WordToImage component, which is mainly created with three others components:

    * A font generator
    * A background generator
    * A Text paster

	This example is a bit more complex one; it takes the usual main three components, but also three deformations, to increase the power of captchas. All three are set to none, a component which creates no deformation, see below, and Examples to have more examples of deformations.
-->
	<bean id="wordtoimage" class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
		<constructor-arg index="0"><ref bean="fontGenRandom"/></constructor-arg>
		<constructor-arg index="1"><ref bean="backGenUni"/></constructor-arg>
		<constructor-arg index="2"><ref bean="simpleWhitePaster"/></constructor-arg>
	</bean>
<!-- 
	A FontGenerator provide Fonts to a WordToImage, differents fonts increase the difficulties for cracking software using a learning process. This one generates random fonts from a list, and the first two arguments are the minimum size and the maximum size of the font.
-->
	<bean id="fontGenRandom" class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator" >
		<constructor-arg index="0"><value>40</value></constructor-arg>
		<constructor-arg index="1"><value>50</value></constructor-arg>
		<constructor-arg index="2">
			<list>
				<ref bean="fontArial"/>
			</list>
		</constructor-arg>
	</bean>
<!-- 
	A font is declared like this :
-->
	<bean id="fontArial" class="java.awt.Font" >
		<constructor-arg index="0"><value>Arial</value></constructor-arg>
		<constructor-arg index="1"><value>0</value></constructor-arg>
		<constructor-arg index="2"><value>10</value></constructor-arg>
	</bean>
<!-- 
	The BackgrountGenerator component can be very simple like in the example, single color, or more complex with real picture, or fancy computed shapes. The first two arguments are always, the size (length and height) of the resulting image.
-->
	<bean id="backGenUni" class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator" >
		<constructor-arg index="0"><value>200</value></constructor-arg>
		<constructor-arg index="1"><value>100</value></constructor-arg>
	</bean>
<!-- 
	The TextPaster, according to his name, pastes the text on the background.
	This can be done in a simple way, (see example below), 
	or another implementation can paste each character randomly (but still readably), 
	or can double the text to make computers more confused. 
	TextPaster can be even decorated to put perturbations around the text, a component,
	TextDecorator, is designed for this purpose, see Annexes for some examples.
	Commons arguments for TextPaster are:
	1. Minimal length of the text
	2. Maximal length of the text
	3. A color generator component to create the text color, see Annexes.
	4. A Boolean to precise if each character should have a different color (true) or the same color for all the text (false)
-->
	<bean id="simpleWhitePaster" class="com.octo.captcha.component.image.textpaster.SimpleTextPaster" >
		<constructor-arg index="0"><value>4</value></constructor-arg>
		<constructor-arg index="1"><value>6</value></constructor-arg>
		<constructor-arg>
				<bean class="java.awt.Color">
					<constructor-arg type="int" index="0" value="0"/>
					<constructor-arg type="int" index="1" value="0"/>
					<constructor-arg type="int" index="2" value="0"/>
				</bean>
		</constructor-arg>
	</bean>
</beans>